from tests.test_ontology import run_ontology
from tests.test_embedding import run_embedding
from tests.test_flavor import run_flavor, generar_formulas
from agents.flavor_agent import Flavor_Agent
from ontology.query_ontology import consultar_tragos
from tests.test_metaheuristic import test_aco_vs_tabu_multiple_seeds
import json

# Ejecutando b√∫squeda en la ontolog√≠a con campos aleatorios para 1000 documentos aleatorios
run_ontology(1000)

# Ejecutando b√∫squeda en el embedding con 100 documentos aleatorios, 5 fragmentos por documento de entre 15-20 palabras
run_embedding(100, 10, 15, 20)

# Ejecutando test para agente de sabores
# Crear agente
agente = Flavor_Agent("flavor", None, consultar_tragos)
# Cargar vectores de sabor
DATA_FILE = "src/flavor_space/cocktail_flavor_vectors.json"
with open(DATA_FILE, "r", encoding="utf-8") as f:
    flavor_vectors = json.load(f)
# Generar f√≥rmulas aleatorias
formulas = generar_formulas(30)  # puedes ajustar el n√∫mero
# Ejecutar evaluaci√≥n del agente de sabor
run_flavor(agente, formulas, flavor_vectors, k=5)


test_aco_vs_tabu_multiple_seeds()

# ‚úÖ ¬øPor qu√© ACO siempre da 292?
# 1. Fitness est√° altamente dominado por alpha
# return alpha * num_fuertes + beta * debiles_cumplidas - gamma * len(solution)
# Con alpha = 100, num_fuertes = 3:

# score_base = 100 * 3 = 300
# La penalizaci√≥n m√°xima por tama√±o (len(solution)) es -gamma * 5 = -10

# El aporte de las d√©biles (beta * debiles_cumplidas) es como mucho +2

# ‚û°Ô∏è Resultado t√≠pico:
# fitness = 300 + [0..2] - [1..10] ‚áí ~292
# üìå Conclusi√≥n: El valor 292 aparece porque es el fitness de una soluci√≥n de 5 elementos, que cumple todas las fuertes y pocas d√©biles. Y como todas las soluciones v√°lidas tienden a eso, se estanca ah√≠.

# 2. Exploraci√≥n d√©bil debido al uso √∫nico de best_solution
# pheromones = update_pheromones(
#     [([s for s in best_solution], best_score)] if best_solution else [],
#     pheromones
# )
# S√≥lo se actualizan las feromonas con la mejor soluci√≥n hist√≥rica

# Esto hace que no haya diversidad: si una soluci√≥n se encontr√≥ primero, se refuerza ciegamente, aunque no sea √≥ptima
# üìå ACO deber√≠a usar varias soluciones buenas (por iteraci√≥n), no solo la mejor global.

# 3. Baja presi√≥n de selecci√≥n y sin uso de heur√≠stica
# No usas heur√≠stica (Œ∑ o visibilidad) para guiar la probabilidad de selecci√≥n.

# Solo feromonas ‚Üí comportamiento casi aleatorio, especialmente al principio.

# 4. Uso de seen_keys limita a√∫n m√°s la diversidad
# if key in seen_keys:
#     continue
# Evita repetir combinaciones, pero combinado con la baja variedad de construcci√≥n, hace que se ignoren muchas oportunidades v√°lidas.